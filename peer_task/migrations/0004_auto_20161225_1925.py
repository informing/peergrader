# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-25 19:25
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('peer_task', '0003_auto_20161220_1955'),
    ]

    operations = [
        migrations.CreateModel(
            name='PeerReviewAssignment',
            fields=[
                ('assignmentid', models.IntegerField(blank=True, db_column='assignmentID', primary_key=True, serialize=False)),
                ('submissionquestion', models.TextField(db_column='submissionQuestion')),
                ('submissiontype', models.CharField(db_column='submissionType', max_length=64)),
                ('submissionstartdate', models.DateTimeField(db_column='submissionStartDate')),
                ('submissionstopdate', models.DateTimeField(db_column='submissionStopDate')),
                ('reviewstartdate', models.DateTimeField(db_column='reviewStartDate')),
                ('reviewstopdate', models.DateTimeField(db_column='reviewStopDate')),
                ('markpostdate', models.DateTimeField(db_column='markPostDate')),
                ('maxsubmissionscore', models.TextField(db_column='maxSubmissionScore')),
                ('maxreviewscore', models.TextField(db_column='maxReviewScore')),
                ('defaultnumberofreviews', models.IntegerField(db_column='defaultNumberOfReviews')),
                ('allowrequestofreviews', models.TextField(db_column='allowRequestOfReviews')),
                ('showmarksforreviewsreceived', models.TextField(db_column='showMarksForReviewsReceived')),
                ('showotherreviewsbystudents', models.TextField(db_column='showOtherReviewsByStudents')),
                ('showotherreviewsbyinstructors', models.TextField(db_column='showOtherReviewsByInstructors')),
                ('showmarksforotherreviews', models.TextField(db_column='showMarksForOtherReviews')),
                ('showmarksforreviewedsubmissions', models.TextField(db_column='showMarksForReviewedSubmissions')),
                ('appealstopdate', models.DateTimeField(db_column='appealStopDate')),
                ('showpoolstatus', models.TextField(db_column='showPoolStatus')),
                ('calibrationmincount', models.IntegerField(db_column='calibrationMinCount')),
                ('calibrationmaxscore', models.IntegerField(db_column='calibrationMaxScore')),
                ('calibrationthresholdmse', models.TextField(db_column='calibrationThresholdMSE')),
                ('calibrationthresholdscore', models.TextField(db_column='calibrationThresholdScore')),
                ('autoassignessaytopic', models.TextField(db_column='autoAssignEssayTopic')),
                ('extracalibrations', models.IntegerField(blank=True, db_column='extraCalibrations')),
                ('essaywordlimit', models.IntegerField(db_column='essayWordLimit')),
                ('calibrationstartdate', models.DateTimeField(db_column='calibrationStartDate')),
                ('calibrationstopdate', models.DateTimeField(db_column='calibrationStopDate')),
            ],
            options={
                'db_table': 'peer_review_assignment',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentArticleResponses',
            fields=[
                ('submissionid', models.IntegerField(blank=True, db_column='submissionID', primary_key=True, serialize=False)),
                ('articleindex', models.IntegerField(db_column='articleIndex')),
                ('outline', models.TextField()),
                ('response', models.TextField()),
            ],
            options={
                'db_table': 'peer_review_assignment_article_responses',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentArticleResponseSettings',
            fields=[
                ('assignmentid', models.IntegerField(db_column='assignmentID', primary_key=True, serialize=False)),
                ('articleindex', models.IntegerField(db_column='articleIndex', primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('link', models.TextField()),
            ],
            options={
                'db_table': 'peer_review_assignment_article_response_settings',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentDenied',
            fields=[
                ('userid', models.IntegerField(db_column='userID', primary_key=True)),
                ('assignmentid', models.IntegerField(db_column='assignmentID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'peer_review_assignment_denied',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentEssays',
            fields=[
                ('submissionid', models.IntegerField(blank=True, db_column='submissionID', primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('topicindex', models.IntegerField(blank=True, db_column='topicIndex')),
            ],
            options={
                'db_table': 'peer_review_assignment_essays',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentEssaySettings',
            fields=[
                ('assignmentid', models.IntegerField(db_column='assignmentID', primary_key=True, serialize=False)),
                ('topicindex', models.IntegerField(db_column='topicIndex', primary_key=True)),
                ('topic', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'peer_review_assignment_essay_settings',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentImages',
            fields=[
                ('submissionid', models.IntegerField(blank=True, db_column='submissionID', primary_key=True, serialize=False)),
                ('imgwidth', models.IntegerField(db_column='imgWidth')),
                ('imgheight', models.IntegerField(db_column='imgHeight')),
                ('imgdata', models.TextField(db_column='imgData')),
                ('text', models.TextField()),
            ],
            options={
                'db_table': 'peer_review_assignment_images',
            },
        ),
        migrations.CreateModel(
            name='PeerReviewAssignmentIndependent',
            fields=[
                ('userid', models.IntegerField(db_column='userID', primary_key=True)),
                ('assignmentid', models.IntegerField(db_column='assignmentID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'peer_review_assignment_independent',
            },
        ),
        migrations.AlterField(
            model_name='assignments',
            name='browsable',
            field=models.BooleanField(db_column='visibleToStudents'),
        ),
        migrations.AlterField(
            model_name='grouppickerassignmentgroups',
            name='groupindex',
            field=models.IntegerField(db_column='groupIndex', primary_key=True),
        ),
        migrations.AlterField(
            model_name='jobnotifications',
            name='seen',
            field=models.BooleanField(),
        ),
        migrations.AlterField(
            model_name='jobnotifications',
            name='success',
            field=models.BooleanField(),
        ),
        migrations.AlterUniqueTogether(
            name='peerreviewassignmentindependent',
            unique_together=set([('userid', 'assignmentid')]),
        ),
        migrations.AlterUniqueTogether(
            name='peerreviewassignmentessaysettings',
            unique_together=set([('assignmentid', 'topicindex')]),
        ),
        migrations.AlterUniqueTogether(
            name='peerreviewassignmentdenied',
            unique_together=set([('userid', 'assignmentid')]),
        ),
        migrations.AlterUniqueTogether(
            name='peerreviewassignmentarticleresponsesettings',
            unique_together=set([('assignmentid', 'articleindex')]),
        ),
    ]
